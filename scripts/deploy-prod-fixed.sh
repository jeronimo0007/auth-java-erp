#!/bin/bash

# Script de deploy para produ√ß√£o
# Este script ser√° executado no VPS via GitHub Actions

set -e

echo "üöÄ Iniciando deploy de produ√ß√£o..."

# Vari√°veis
IMAGE_NAME="ghcr.io/jeronimo0007/auth-java-erp:latest"
CONTAINER_NAME="auth-prod"
PORT="8080"

# Login no GitHub Container Registry
echo "üîê Fazendo login no GitHub Container Registry..."
echo "$GITHUB_TOKEN" | docker login ghcr.io -u "$GITHUB_ACTOR" --password-stdin

# Parar e remover container existente
echo "üõë Parando container de produ√ß√£o existente..."
docker stop "$CONTAINER_NAME" 2>/dev/null || true
docker rm "$CONTAINER_NAME" 2>/dev/null || true

# Remover imagem antiga
echo "üóëÔ∏è Removendo imagem antiga..."
docker rmi "$IMAGE_NAME" 2>/dev/null || true

# Baixar nova imagem
echo "üì• Baixando nova imagem..."
docker pull "$IMAGE_NAME"

# Criar diret√≥rio de uploads se n√£o existir
echo "üìÅ Criando diret√≥rio de uploads..."
sudo mkdir -p /var/app/uploads
sudo chown -R 1000:1000 /var/app/uploads

# Executar novo container
echo "üèÉ Executando novo container de produ√ß√£o..."
docker run -d \
  --name "$CONTAINER_NAME" \
  --restart unless-stopped \
  -p "$PORT:8080" \
  -e SPRING_PROFILES_ACTIVE=prod \
  -e DB_URL="$DB_URL" \
  -e DB_USERNAME="$DB_USERNAME" \
  -e DB_PASSWORD="$DB_PASSWORD" \
  -e JWT_SECRET="$JWT_SECRET" \
  -e JWT_EXPIRATION="$JWT_EXPIRATION" \
  -e STORAGE_S3_NAME_SPACE="$STORAGE_S3_NAME_SPACE" \
  -e STORAGE_S3_ACCESS_KEY="$STORAGE_S3_ACCESS_KEY" \
  -e STORAGE_S3_SECRET_KEY="$STORAGE_S3_SECRET_KEY" \
  -e RABBITMQ_HOST="$RABBITMQ_HOST" \
  -e RABBITMQ_USERNAME="$RABBITMQ_USERNAME" \
  -e RABBITMQ_PASSWORD="$RABBITMQ_PASSWORD" \
  -v /var/app/uploads:/app/uploads \
  "$IMAGE_NAME"

# Aguardar aplica√ß√£o inicializar
echo "‚è≥ Aguardando aplica√ß√£o inicializar..."
sleep 15

# Verificar se o container est√° rodando
echo "üîç Verificando status do container..."
if docker ps | grep -q "$CONTAINER_NAME"; then
    echo "‚úÖ Container de produ√ß√£o est√° rodando!"
    echo "üåê Aplica√ß√£o dispon√≠vel em: http://$(curl -s ifconfig.me):$PORT"
else
    echo "‚ùå Erro: Container n√£o est√° rodando!"
    echo "üìã Logs do container:"
    docker logs "$CONTAINER_NAME"
    exit 1
fi

# Limpar imagens n√£o utilizadas
echo "üßπ Limpando imagens n√£o utilizadas..."
docker image prune -f

echo "üéâ Deploy de produ√ß√£o conclu√≠do com sucesso!"
